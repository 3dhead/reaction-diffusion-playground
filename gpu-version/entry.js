import * as THREE from '../node_modules/three/build/three.module.js';

var container;
var camera, scene, renderer;
var uniforms;

init();
update();

function init() {
  // Set up the camera and scene
  camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
  scene = new THREE.Scene();

  // Initialize the in uniforms with default values
  uniforms = {
    "time": { value: 1.0 }
  };

  // Create a material that uses our uniforms and shaders
  var material = new THREE.ShaderMaterial({
    uniforms: uniforms,
    vertexShader: document.getElementById('vertexShader').textContent,
    fragmentShader: document.getElementById('fragmentShader').textContent
  });

  // Create a plane and orient it perpendicular to the camera so it seems 2D
  var mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2), material);
  scene.add(mesh);

  // Set up the renderer (a WebGL context inside a <canvas>)
  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio(window.devicePixelRatio ? window.devicePixelRatio : 1);

  // Grab the container DOM element and inject the <canvas> element generated by the renderer
  container = document.getElementById('container');
  container.appendChild(renderer.domElement);

  // Set up the renderer dimensions, and update them when the browser is resized
  window.addEventListener('resize', onWindowResize, false);
  onWindowResize();
}

function update(timestamp) {
  requestAnimationFrame(update);
  uniforms["time"].value = timestamp / 1000;
  renderer.render(scene, camera);
}

function onWindowResize() {
  renderer.setSize(window.innerWidth, window.innerHeight);
}